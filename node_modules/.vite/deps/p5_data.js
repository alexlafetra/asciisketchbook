import "./chunk-G3PMV62Z.js";

// node_modules/p5/dist/data/local_storage.js
function storage(p52, fn) {
  fn.storeItem = function(key, value) {
    if (typeof key !== "string") {
      console.log(
        `The argument that you passed to storeItem() - ${key} is not a string.`
      );
    }
    if (key.endsWith("p5TypeID")) {
      console.log(
        `The argument that you passed to storeItem() - ${key} must not end with 'p5TypeID'.`
      );
    }
    if (typeof value === "undefined") {
      console.log("You cannot store undefined variables using storeItem().");
    }
    let type = typeof value;
    switch (type) {
      case "number":
      case "boolean":
        value = value.toString();
        break;
      case "object":
        if (value instanceof p52.Color) {
          type = "p5.Color";
          value = value.toString();
        } else if (value instanceof p52.Vector) {
          type = "p5.Vector";
          const coord = [value.x, value.y, value.z];
          value = coord;
        }
        value = JSON.stringify(value);
        break;
    }
    localStorage.setItem(key, value);
    const typeKey = `${key}p5TypeID`;
    localStorage.setItem(typeKey, type);
  };
  fn.getItem = function(key) {
    let value = localStorage.getItem(key);
    const type = localStorage.getItem(`${key}p5TypeID`);
    if (typeof type === "undefined") {
      console.log(
        `Unable to determine type of item stored under ${key}in local storage. Did you save the item with something other than setItem()?`
      );
    } else if (value !== null) {
      switch (type) {
        case "number":
          value = parseFloat(value);
          break;
        case "boolean":
          value = value === "true";
          break;
        case "object":
          value = JSON.parse(value);
          break;
        case "p5.Color":
          value = this.color(JSON.parse(value));
          break;
        case "p5.Vector":
          value = JSON.parse(value);
          value = this.createVector(...value);
          break;
      }
    }
    return value;
  };
  fn.clearStorage = function() {
    const keys = Object.keys(localStorage);
    keys.forEach((key) => {
      if (key.endsWith("p5TypeID")) {
        this.removeItem(key.replace("p5TypeID", ""));
      }
    });
  };
  fn.removeItem = function(key) {
    if (typeof key !== "string") {
      console.log(
        `The argument that you passed to removeItem() - ${key} is not a string.`
      );
    }
    localStorage.removeItem(key);
    localStorage.removeItem(`${key}p5TypeID`);
  };
}
if (typeof p5 !== "undefined") {
  storage(p5, p5.prototype);
}

// node_modules/p5/dist/data/index.js
function data(p52) {
  p52.registerAddon(storage);
}
export {
  data as default
};
//# sourceMappingURL=p5_data.js.map
