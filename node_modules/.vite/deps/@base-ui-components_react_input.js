import {
  DEFAULT_VALIDITY_STATE,
  FieldRootContext,
  fieldValidityMapping,
  getCombinedFieldValidityData,
  getTarget,
  useBaseUiId,
  useControlled,
  useEventCallback,
  useField,
  useFieldControlValidation,
  useFieldRootContext,
  useFormContext,
  useIsoLayoutEffect,
  useRenderElement
} from "./chunk-LCMF2OQA.js";
import {
  require_jsx_runtime
} from "./chunk-2ZET3HRN.js";
import "./chunk-S3Z6QACX.js";
import {
  __export,
  __toESM,
  require_react
} from "./chunk-IYDKXRZQ.js";

// node_modules/@base-ui-components/react/esm/input/Input.js
var React8 = __toESM(require_react(), 1);

// node_modules/@base-ui-components/react/esm/field/index.parts.js
var index_parts_exports = {};
__export(index_parts_exports, {
  Control: () => FieldControl,
  Description: () => FieldDescription,
  Error: () => FieldError,
  Label: () => FieldLabel,
  Root: () => FieldRoot,
  Validity: () => FieldValidity
});

// node_modules/@base-ui-components/react/esm/field/root/FieldRoot.js
var React2 = __toESM(require_react(), 1);

// node_modules/@base-ui-components/react/esm/fieldset/root/FieldsetRootContext.js
var React = __toESM(require_react(), 1);
var FieldsetRootContext = React.createContext({
  legendId: void 0,
  setLegendId: () => {
  },
  disabled: void 0
});
if (true) FieldsetRootContext.displayName = "FieldsetRootContext";
function useFieldsetRootContext() {
  return React.useContext(FieldsetRootContext);
}

// node_modules/@base-ui-components/react/esm/field/root/FieldRoot.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var FieldRoot = React2.forwardRef(function FieldRoot2(componentProps, forwardedRef) {
  const {
    render,
    className,
    validate: validateProp,
    validationDebounceTime = 0,
    validationMode = "onBlur",
    name,
    disabled: disabledProp = false,
    invalid: invalidProp,
    ...elementProps
  } = componentProps;
  const {
    disabled: disabledFieldset
  } = useFieldsetRootContext();
  const {
    errors
  } = useFormContext();
  const validate = useEventCallback(validateProp || (() => null));
  const disabled = disabledFieldset || disabledProp;
  const [controlId, setControlId] = React2.useState(void 0);
  const [labelId, setLabelId] = React2.useState(void 0);
  const [messageIds, setMessageIds] = React2.useState([]);
  const [touched, setTouched] = React2.useState(false);
  const [dirty, setDirtyUnwrapped] = React2.useState(false);
  const [filled, setFilled] = React2.useState(false);
  const [focused, setFocused] = React2.useState(false);
  const markedDirtyRef = React2.useRef(false);
  const setDirty = React2.useCallback((value) => {
    if (value) {
      markedDirtyRef.current = true;
    }
    setDirtyUnwrapped(value);
  }, []);
  const invalid = Boolean(invalidProp || name && {}.hasOwnProperty.call(errors, name) && errors[name] !== void 0);
  const [validityData, setValidityData] = React2.useState({
    state: DEFAULT_VALIDITY_STATE,
    error: "",
    errors: [],
    value: null,
    initialValue: null
  });
  const valid = !invalid && validityData.state.valid;
  const state = React2.useMemo(() => ({
    disabled,
    touched,
    dirty,
    valid,
    filled,
    focused
  }), [disabled, touched, dirty, valid, filled, focused]);
  const contextValue = React2.useMemo(() => ({
    invalid,
    controlId,
    setControlId,
    labelId,
    setLabelId,
    messageIds,
    setMessageIds,
    name,
    validityData,
    setValidityData,
    disabled,
    touched,
    setTouched,
    dirty,
    setDirty,
    filled,
    setFilled,
    focused,
    setFocused,
    validate,
    validationMode,
    validationDebounceTime,
    state,
    markedDirtyRef
  }), [invalid, controlId, labelId, messageIds, name, validityData, disabled, touched, dirty, setDirty, filled, setFilled, focused, setFocused, validate, validationMode, validationDebounceTime, state]);
  const element = useRenderElement("div", componentProps, {
    ref: forwardedRef,
    state,
    props: elementProps,
    customStyleHookMapping: fieldValidityMapping
  });
  return (0, import_jsx_runtime.jsx)(FieldRootContext.Provider, {
    value: contextValue,
    children: element
  });
});
if (true) FieldRoot.displayName = "FieldRoot";

// node_modules/@base-ui-components/react/esm/field/label/FieldLabel.js
var React3 = __toESM(require_react(), 1);
var FieldLabel = React3.forwardRef(function FieldLabel2(componentProps, forwardedRef) {
  const {
    render,
    className,
    id: idProp,
    ...elementProps
  } = componentProps;
  const {
    labelId,
    setLabelId,
    state,
    controlId
  } = useFieldRootContext(false);
  const id = useBaseUiId(idProp);
  const htmlFor = controlId ?? void 0;
  useIsoLayoutEffect(() => {
    if (controlId != null || idProp) {
      setLabelId(id);
    }
    return () => {
      setLabelId(void 0);
    };
  }, [controlId, id, idProp, setLabelId]);
  const element = useRenderElement("label", componentProps, {
    ref: forwardedRef,
    state,
    props: [{
      id: labelId,
      htmlFor,
      onMouseDown(event) {
        const target = getTarget(event.nativeEvent);
        if (target?.closest("button,input,select,textarea")) {
          return;
        }
        if (!event.defaultPrevented && event.detail > 1) {
          event.preventDefault();
        }
      }
    }, elementProps],
    customStyleHookMapping: fieldValidityMapping
  });
  return element;
});
if (true) FieldLabel.displayName = "FieldLabel";

// node_modules/@base-ui-components/react/esm/field/error/FieldError.js
var React4 = __toESM(require_react(), 1);
var FieldError = React4.forwardRef(function FieldError2(componentProps, forwardedRef) {
  const {
    render,
    id: idProp,
    className,
    match,
    ...elementProps
  } = componentProps;
  const id = useBaseUiId(idProp);
  const {
    validityData,
    state,
    name,
    setMessageIds
  } = useFieldRootContext(false);
  const {
    errors
  } = useFormContext();
  const formError = name ? errors[name] : null;
  let rendered = false;
  if (formError || match === true) {
    rendered = true;
  } else if (match) {
    rendered = Boolean(validityData.state[match]);
  } else {
    rendered = validityData.state.valid === false;
  }
  useIsoLayoutEffect(() => {
    if (!rendered || !id) {
      return void 0;
    }
    setMessageIds((v) => v.concat(id));
    return () => {
      setMessageIds((v) => v.filter((item) => item !== id));
    };
  }, [rendered, id, setMessageIds]);
  const element = useRenderElement("div", componentProps, {
    ref: forwardedRef,
    state,
    props: [{
      id,
      children: formError || (validityData.errors.length > 1 ? React4.createElement("ul", {}, validityData.errors.map((message) => React4.createElement("li", {
        key: message
      }, message))) : validityData.error)
    }, elementProps],
    customStyleHookMapping: fieldValidityMapping
  });
  if (!rendered) {
    return null;
  }
  return element;
});
if (true) FieldError.displayName = "FieldError";

// node_modules/@base-ui-components/react/esm/field/description/FieldDescription.js
var React5 = __toESM(require_react(), 1);
var FieldDescription = React5.forwardRef(function FieldDescription2(componentProps, forwardedRef) {
  const {
    render,
    id: idProp,
    className,
    ...elementProps
  } = componentProps;
  const {
    state
  } = useFieldRootContext(false);
  const id = useBaseUiId(idProp);
  const {
    setMessageIds
  } = useFieldRootContext();
  useIsoLayoutEffect(() => {
    if (!id) {
      return void 0;
    }
    setMessageIds((v) => v.concat(id));
    return () => {
      setMessageIds((v) => v.filter((item) => item !== id));
    };
  }, [id, setMessageIds]);
  const element = useRenderElement("p", componentProps, {
    ref: forwardedRef,
    state,
    props: [{
      id
    }, elementProps],
    customStyleHookMapping: fieldValidityMapping
  });
  return element;
});
if (true) FieldDescription.displayName = "FieldDescription";

// node_modules/@base-ui-components/react/esm/field/control/FieldControl.js
var React6 = __toESM(require_react(), 1);
var FieldControl = React6.forwardRef(function FieldControl2(componentProps, forwardedRef) {
  const {
    render,
    className,
    id: idProp,
    name: nameProp,
    value: valueProp,
    disabled: disabledProp = false,
    onValueChange,
    defaultValue,
    ...elementProps
  } = componentProps;
  const {
    state: fieldState,
    name: fieldName,
    disabled: fieldDisabled
  } = useFieldRootContext();
  const disabled = fieldDisabled || disabledProp;
  const name = fieldName ?? nameProp;
  const state = React6.useMemo(() => ({
    ...fieldState,
    disabled
  }), [fieldState, disabled]);
  const {
    setControlId,
    labelId,
    setTouched,
    setDirty,
    validityData,
    setFocused,
    setFilled,
    validationMode
  } = useFieldRootContext();
  const {
    getValidationProps,
    getInputValidationProps,
    commitValidation,
    inputRef
  } = useFieldControlValidation();
  const id = useBaseUiId(idProp);
  useIsoLayoutEffect(() => {
    setControlId(id);
    return () => {
      setControlId(void 0);
    };
  }, [id, setControlId]);
  useIsoLayoutEffect(() => {
    const hasExternalValue = valueProp != null;
    if (inputRef.current?.value || hasExternalValue && valueProp !== "") {
      setFilled(true);
    } else if (hasExternalValue && valueProp === "") {
      setFilled(false);
    }
  }, [inputRef, setFilled, valueProp]);
  const [value, setValueUnwrapped] = useControlled({
    controlled: valueProp,
    default: defaultValue,
    name: "FieldControl",
    state: "value"
  });
  const setValue = useEventCallback((nextValue, event) => {
    setValueUnwrapped(nextValue);
    onValueChange?.(nextValue, event);
  });
  useField({
    id,
    name,
    commitValidation,
    value,
    getValue: () => inputRef.current?.value,
    controlRef: inputRef
  });
  const element = useRenderElement("input", componentProps, {
    ref: forwardedRef,
    state,
    props: [{
      id,
      disabled,
      name,
      ref: inputRef,
      "aria-labelledby": labelId,
      value,
      onChange(event) {
        if (value != null) {
          setValue(event.currentTarget.value, event.nativeEvent);
        }
        setDirty(event.currentTarget.value !== validityData.initialValue);
        setFilled(event.currentTarget.value !== "");
      },
      onFocus() {
        setFocused(true);
      },
      onBlur(event) {
        setTouched(true);
        setFocused(false);
        if (validationMode === "onBlur") {
          commitValidation(event.currentTarget.value);
        }
      },
      onKeyDown(event) {
        if (event.currentTarget.tagName === "INPUT" && event.key === "Enter") {
          setTouched(true);
          commitValidation(event.currentTarget.value);
        }
      }
    }, getValidationProps(), getInputValidationProps(), elementProps],
    customStyleHookMapping: fieldValidityMapping
  });
  return element;
});
if (true) FieldControl.displayName = "FieldControl";

// node_modules/@base-ui-components/react/esm/field/validity/FieldValidity.js
var React7 = __toESM(require_react(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var FieldValidity = function FieldValidity2(props) {
  const {
    children
  } = props;
  const {
    validityData,
    invalid
  } = useFieldRootContext(false);
  const fieldValidityState = React7.useMemo(() => {
    const combinedFieldValidityData = getCombinedFieldValidityData(validityData, invalid);
    return {
      ...combinedFieldValidityData,
      validity: combinedFieldValidityData.state
    };
  }, [validityData, invalid]);
  return (0, import_jsx_runtime2.jsx)(React7.Fragment, {
    children: children(fieldValidityState)
  });
};
if (true) FieldValidity.displayName = "FieldValidity";

// node_modules/@base-ui-components/react/esm/input/Input.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var Input = React8.forwardRef(function Input2(props, forwardedRef) {
  return (0, import_jsx_runtime3.jsx)(index_parts_exports.Control, {
    ref: forwardedRef,
    ...props
  });
});
if (true) Input.displayName = "Input";
export {
  Input
};
//# sourceMappingURL=@base-ui-components_react_input.js.map
